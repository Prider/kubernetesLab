kubectl command line general guide:
##################################
# Category: Imperative Commands: #
##################################

  1.1 Create object command:
      1.1.1 "run": create deployment
        kubectl run NAME --image=image [--env="key=value"] [--port=port] [--replicas=replicas] [--dry-run=bool] [--overrides=inline-json] [--command] -- [COMMAND] [args...]
        Ex: kubeclt run webtest --image labdocker/cluster:webservicelite

      1.1.2 "expose": create service for Pods, deployment,
        kubectl expose (-f FILENAME | TYPE NAME) [--port=port] [--protocol=TCP|UDP] [--target-port=number-or-name] [--name=name] [--external-ip=external-ip-of-service] [--type=type]
        Ex: kubectl expose deployment webtest --target-port=80 --type-NodePort

      1.1.3 "autoscale": HPA for automatic scale Pods vary by CPU (Major)
        kubectl autoscale (-f FILENAME | TYPE NAME | TYPE/NAME) [--min=MINPODS] --max=MAXPODS [--cpu-percent=CPU] [flags]
        Ex: kubectl autoscale pods/webtest --min=1 --max-10 --cpu-percent=20


  1.2 Update object command:
      1.2.1 "scale": scale replicas of Pods
        kubectl scale [--resource-version=version] [--current-replicas=count] --replicas=COUNT (-f FILENAME | TYPE NAME)
        Ex: kubectl scale --replicas=3 rs/webtest

      1.2.2 "annotate": add annotation for object
        kubectl annotate [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]
        Ex: kubectl annotate pods --all description='Kubernetes Farm'

      1.2.3 "label": add label for object in cluster
        kubectl label [--overwrite] (-f FILENAME | TYPE NAME) KEY_1=VAL_1 ... KEY_N=VAL_N [--resource-version=version]
        Ex: kubectl label --overwrite pods webtest status=stable

      1.2.4 "set": set some property to
        kubectl set SUBCOMMAND
                    - Update: Update docker image for some object: kubectl set image (-f FILENAME | TYPE NAME) CONTAINER_NAME_1=CONTAINER_IMAGE_1 ... CONTAINER_NAME_N=CONTAINER_IMAGE_N
                    Ex: kubectl set image deployment/webtest webtest=labdocker/cluster:webservicelite
                    - Resource: Limit resource for rc, deployment: kubectl set resources (-f FILENAME | TYPE NAME) ([--limits=LIMITS & --requests=REQUESTS]
                    Ex: kubectl set resources deployment nginx --limits=cpu=200m,memory=512Mi --requests=cpu=100m,memory=256Mi
                    - Selector: Override existing "selector": kubectl set selector (-f FILENAME | TYPE NAME) EXPRESSIONS [--resource-version=version]
                    Ex:kubectl create service clusterip my-svc --clusterip="None" -o yaml --dry-run | kubectl set selector --local -f - 'environment=qa' -o yaml | kubectl create -f -
                       kubectl create deployment my-dep -o yaml --dry-run | kubectl label --local -f - environment=qa -o yaml | kubectl create -f -

  1.3 Delete object command:
      1.3.1 "delete": delete object from cluster
        kubectl delete ([-f FILENAME] | TYPE [(NAME | -l label | --all)])
        Ex: kubectl delete svc/webtest

  1.4 Get object information command:
      1.4.1 "get": retrieve some information
        kubectl get get [(-o|--output=)json|yaml|wide|custom-columns=...|custom-columns-file=...|go-template=...|go-template-file=...|jsonpath=...|jsonpath-file=...] (TYPE [NAME | -l label] | TYPE/NAME ...) [flags]
        Ex: kubectl get svc

      1.4.2 "describe": retrieve full detail of object in cluster
        kubectl describe (-f FILENAME | TYPE [NAME_PREFIX | -l label] | TYPE/NAME)
        Ex: kubectl describe svc webtest

      1.4.3 "logs": get log from pods (container inside) by define name or label
        kubectl logs [-f] [-p] (POD | TYPE/NAME) [-c CONTAINER]
        Ex: kubectl logs webtest -c webtest

  1.5 Edit object before create (Adhoc without change YAML file)
        kubectl edit (RESOURCE/NAME | -f FILENAME)
        Ex: kubectl create service clusterip webtest -o yaml --dry-run > /tmp/srv.yaml
            kubectl create --edit -f /tmp/srv.yaml


############################################
# Category: Imperative configuration file: #
############################################
  2.1 Create new object in cluster (-f YAML file)
        kubectl create -f FILENAME
        kubectl create <type> -f FILENAME
        Ex: kubectl create -f webtest_pod.yml

  2.2 Delete object in cluster (-f YAML file)
        kubectl delete ([-f FILENAME] | TYPE [(NAME | -l label | --all)])
        Ex: kubectl delete -f webtest_pod.yml

  2.3 Convert object to YAML file
        kubectl get <kind>/<name> -o yaml --export > <kind>_<name>.yml
        Ex: kubectl get pods/webtest -o yaml --export > webtest_pod.yml


#############################################
# Category: Declarative configuration file: #
#############################################
  3.1 Apply configuration folder to cluster
        kubectl apply -f <directory>
        Ex: kubectl apply -f /kubenetes_lab
        Ex: kubectl apply -f https://k8s.io/docs/tutorials/object-management-kubectl/simple_deployment.yaml


#################################################################################################################################################################
Remark:

  Symbol:
  <type> : Type of object on kubernetes such as
            - Pods
            - Service (svc)
            - Replication Controller (rc)
            - Replica Set (rs)
            - etc

  <name> : Name of the object

Reference:
  https://kubernetes.io/docs/tutorials/object-management-kubectl/object-management/
